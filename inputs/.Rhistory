"#4DBEEE","#4DBEEE","#4DBEEE","#77AC30")) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.13,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
theme(legend.position = 'none',
axis.text.x = element_blank()) +
xlab('') +
ylab('')
nonpair_mvpa_fig
vispair_mvpa_fig <-ggplot(vispair_mvpa) +
geom_point(aes(x = reorder(roi, roi_order), y = accuracy, shape = as.factor(subID),
color = roi), position = position_dodge(0.1)) +#, shape = as.factor(subID)
stat_summary(aes(x = reorder(roi, roi_order), y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
scale_color_manual(values = c( "#4DBEEE","#4DBEEE","#4DBEEE","#77AC30","#77AC30","#D95319","#77AC30",
"#4DBEEE","#4DBEEE","#4DBEEE","#77AC30")) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.13,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
theme(legend.position = 'none',
axis.text.x = element_blank()) +
xlab('') +
ylab('')
vispair_mvpa_fig
require(grid)   # for the textGrob() function
figure <- ggarrange(seqpair_mvpa_fig, nonpair_mvpa_fig, vispair_mvpa_fig,
ncol = 1, nrow = 3)
figure
annotate_figure(figure, left = textGrob("classification acc.",rot=90,
vjust = 1, gp = gpar(cex = 1.3)), #gp for the fontsize rot90-->vertical
bottom = textGrob("ROIs", hjust = 0.8))
seqpair_mvpa_fig <-ggplot(seqpair_mvpa) +
geom_point(aes(x = reorder(roi, roi_order), y = accuracy, shape = as.factor(subID),
color = roi), position = position_dodge(0.2)) +#, shape = as.factor(subID)
stat_summary(aes(x = reorder(roi, roi_order), y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
scale_color_manual(values = c( "#4DBEEE","#4DBEEE","#4DBEEE","#77AC30","#77AC30","#D95319","#77AC30",
"#4DBEEE","#4DBEEE","#4DBEEE","#77AC30")) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
annotate("text", x = c(2,3,4,5,6,7,8,9,10,11), y = 0.35,
label = c("*","***","*","**","**","***","***","**","***","***"),size = 5) +
theme_classic() +
coord_cartesian(ylim = c(0.13,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
theme(legend.position = 'none',
axis.text.x = element_blank()) +
xlab('') +
ylab('')
seqpair_mvpa_fig
nonpair_mvpa_fig <-ggplot(nonpair_mvpa) +
geom_point(aes(x = reorder(roi, roi_order), y = accuracy, shape = as.factor(subID),
color = roi), position = position_dodge(0.2)) +#, shape = as.factor(subID)
stat_summary(aes(x = reorder(roi, roi_order), y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
scale_color_manual(values = c( "#4DBEEE","#4DBEEE","#4DBEEE","#77AC30","#77AC30","#D95319","#77AC30",
"#4DBEEE","#4DBEEE","#4DBEEE","#77AC30")) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.13,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
theme(legend.position = 'none',
axis.text.x = element_blank()) +
xlab('') +
ylab('')
nonpair_mvpa_fig
vispair_mvpa_fig <-ggplot(vispair_mvpa) +
geom_point(aes(x = reorder(roi, roi_order), y = accuracy, shape = as.factor(subID),
color = roi), position = position_dodge(0.2)) +#, shape = as.factor(subID)
stat_summary(aes(x = reorder(roi, roi_order), y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
scale_color_manual(values = c( "#4DBEEE","#4DBEEE","#4DBEEE","#77AC30","#77AC30","#D95319","#77AC30",
"#4DBEEE","#4DBEEE","#4DBEEE","#77AC30")) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.13,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
theme(legend.position = 'none',
axis.text.x = element_blank()) +
xlab('') +
ylab('')
vispair_mvpa_fig
require(grid)   # for the textGrob() function
figure <- ggarrange(seqpair_mvpa_fig, nonpair_mvpa_fig, vispair_mvpa_fig,
ncol = 1, nrow = 3)
figure
annotate_figure(figure, left = textGrob("classification acc.",rot=90,
vjust = 1, gp = gpar(cex = 1.3)), #gp for the fontsize rot90-->vertical
bottom = textGrob("ROIs", hjust = 0.8))
seqpair_mvpa_fig <-ggplot(seqpair_mvpa) +
geom_point(aes(x = reorder(roi, roi_order), y = accuracy, shape = as.factor(subID),
color = roi), position = position_dodge(0.2)) +#, shape = as.factor(subID)
stat_summary(aes(x = reorder(roi, roi_order), y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
scale_color_manual(values = c( "#4DBEEE","#4DBEEE","#4DBEEE","#77AC30","#77AC30","#D95319","#77AC30",
"#4DBEEE","#4DBEEE","#4DBEEE","#77AC30")) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
annotate("text", x = c(2,3,4,5,6,7,8,9,10,11), y = 0.35,
label = c("*","***","*","**","**","***","***","**","***","***"),size = 7) +
theme_classic() +
coord_cartesian(ylim = c(0.13,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
theme(legend.position = 'none',
axis.text.x = element_blank()) +
xlab('') +
ylab('')
seqpair_mvpa_fig
nonpair_mvpa_fig <-ggplot(nonpair_mvpa) +
geom_point(aes(x = reorder(roi, roi_order), y = accuracy, shape = as.factor(subID),
color = roi), position = position_dodge(0.2)) +#, shape = as.factor(subID)
stat_summary(aes(x = reorder(roi, roi_order), y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
scale_color_manual(values = c( "#4DBEEE","#4DBEEE","#4DBEEE","#77AC30","#77AC30","#D95319","#77AC30",
"#4DBEEE","#4DBEEE","#4DBEEE","#77AC30")) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.13,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
theme(legend.position = 'none',
axis.text.x = element_blank()) +
xlab('') +
ylab('')
nonpair_mvpa_fig
require(grid)   # for the textGrob() function
figure <- ggarrange(seqpair_mvpa_fig, nonpair_mvpa_fig, vispair_mvpa_fig,
ncol = 1, nrow = 3)
figure
annotate_figure(figure, left = textGrob("classification acc.",rot=90,
vjust = 1, gp = gpar(cex = 1.3)), #gp for the fontsize rot90-->vertical
bottom = textGrob("ROIs", hjust = 0.8))
rm(list=ls()) #clean console
pathResults <- '/Users/yiyang/DATA/numMVPA_fmriprep/outputs/derivatives/CoSMoMVPA/SLeyemove/S2'
fileName = paste(pathResults, 'numMVPA_crosstype_paeusorunDecoding_SLpTFCE_eyemove_s2_ratio150.csv', sep ='/')
mvpa <- read.csv(fileName, sep ='\t')
#numMVPA_cross-modalDecoding_SLspheres_s2_ratio100_202401111453
#numMVPA_cross-modalDecoding_IPS_s2_ratio200_202311151750
##################
mvpa <- mvpa[-c(7:8)]
mvpa$subID <-as.factor(mvpa$subID)
head(mvpa)
#name change from mask to roi
mvpa$mask <-as.factor(mvpa$mask)
names(mvpa)[2] <- 'roi'
# let's make a expType to split the no_pitch exp from pitch exp
mvpa$subNb <- as.numeric(mvpa$subID)
mvpa$roi_order <- ifelse(mvpa$roi == 'LhIP2', 1,
ifelse(mvpa$roi == 'LhIP4',2,
ifelse(mvpa$roi == 'LhIP8', 3,
ifelse(mvpa$roi == 'Lprecentral', 4,
ifelse(mvpa$roi == 'Lpremotor', 5,
ifelse(mvpa$roi == 'LV1', 6,
ifelse(mvpa$roi == 'Rbroca', 7,
ifelse(mvpa$roi == 'RhIP3', 8,
ifelse(mvpa$roi == 'RhIP6', 9,
ifelse(mvpa$roi == 'RPFm', 10,
ifelse(mvpa$roi == 'Rprecentral', 11,
99)))))))))))
# make everything factor
str(mvpa)
mvpa$decodingCondition<-as.factor(mvpa$decodingCondition)
# subset the dataframe for plotting/analysis
img = 'beta' # or 't_maps'
mvpa = subset(mvpa, image == img )
# subset the dataframe for plotting/analysis
crosstype_mvpa = subset(mvpa, decodingCondition %in%
c('aud_seqT1_vs_vis_seqT2', 'aud_seqT2_vs_vis_seqT1'))
crosstype_mvpa_fig <-ggplot(crosstype_mvpa) +
geom_point(aes(x = roi:decodingCondition, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi:decodingCondition, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
trainaseq_testvseq_mvpa_fig <-ggplot(trainaseq_testvseq_mvpa) +
geom_point(aes(x = reorder(roi, roi_order), y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = reorder(roi, roi_order), y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq<----audseq") +
xlab('')
trainaseq_testvseq_mvpa_fig
View(crosstype_mvpa)
View(crosstype_mvpa)
rm(list=ls()) #clean console
pathResults <- '/Users/yiyang/DATA/numMVPA_fmriprep/outputs/derivatives/CoSMoMVPA/SLeyemove/S2'
fileName = paste(pathResults, 'numMVPA_cross-typeDecoding_SLpTFCE_eyemove_s2_ratio150.csv', sep ='/')
mvpa <- read.csv(fileName, sep ='\t')
#numMVPA_cross-modalDecoding_SLspheres_s2_ratio100_202401111453
#numMVPA_cross-modalDecoding_IPS_s2_ratio200_202311151750
# numMVPA_crosstype_paeusorunDecoding_SLpTFCE_eyemove_s2_ratio150
##################
mvpa <- mvpa[-c(7:8)]
mvpa$subID <-as.factor(mvpa$subID)
head(mvpa)
#name change from mask to roi
mvpa$mask <-as.factor(mvpa$mask)
names(mvpa)[2] <- 'roi'
# let's make a expType to split the no_pitch exp from pitch exp
mvpa$subNb <- as.numeric(mvpa$subID)
mvpa$roi_order <- ifelse(mvpa$roi == 'LhIP2', 1,
ifelse(mvpa$roi == 'LhIP4',2,
ifelse(mvpa$roi == 'LhIP8', 3,
ifelse(mvpa$roi == 'Lprecentral', 4,
ifelse(mvpa$roi == 'Lpremotor', 5,
ifelse(mvpa$roi == 'LV1', 6,
ifelse(mvpa$roi == 'Rbroca', 7,
ifelse(mvpa$roi == 'RhIP3', 8,
ifelse(mvpa$roi == 'RhIP6', 9,
ifelse(mvpa$roi == 'RPFm', 10,
ifelse(mvpa$roi == 'Rprecentral', 11,
99)))))))))))
# make everything factor
str(mvpa)
mvpa$decodingCondition<-as.factor(mvpa$decodingCondition)
# subset the dataframe for plotting/analysis
img = 'beta' # or 't_maps'
mvpa = subset(mvpa, image == img )
# subset the dataframe for plotting/analysis
crosstype_mvpa = subset(mvpa, decodingCondition %in%
c('aud_seqT1_vs_vis_seqT2', 'aud_seqT2_vs_vis_seqT1'))
crosstype_mvpa_fig <-ggplot(crosstype_mvpa) +
geom_point(aes(x = roi:decodingCondition, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi:decodingCondition, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
# subset the dataframe for plotting/analysis
train1test2_mvpa = subset(mvpa, decodingCondition %in%
c('trainvseqT1_testaseqT2', 'trainaseqT1_testvseqT2'))
crosstype_mvpa_fig <-ggplot(crosstype_mvpa) +
geom_point(aes(x = roi:decodingCondition, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi:decodingCondition, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
# subset the dataframe for plotting/analysis
train1test2_mvpa = subset(mvpa, decodingCondition %in%
c('trainvseqT2_testaseqT1', 'trainaseqT2_testvseqT1'))
crosstype_mvpa_fig <-ggplot(crosstype_mvpa) +
geom_point(aes(x = roi:decodingCondition, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi:decodingCondition, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
crosstype_mvpa_fig <-ggplot(crosstype_mvpa) +
geom_point(aes(x = roi, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
# subset the dataframe for plotting/analysis
train1test2_mvpa = subset(mvpa, decodingCondition %in%
c('trainvseqT1_testaseqT2', 'trainaseqT1_testvseqT2'))
crosstype_mvpa_fig <-ggplot(crosstype_mvpa) +
geom_point(aes(x = roi, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
View(crosstype_mvpa)
View(crosstype_mvpa)
rm(list=ls()) #clean console
pathResults <- '/Users/yiyang/DATA/numMVPA_fmriprep/outputs/derivatives/CoSMoMVPA/SLeyemove/S2'
fileName = paste(pathResults, 'numMVPA_crosstype_paeusorunDecoding_SLpTFCE_eyemove_s2_ratio150.csv', sep ='/')
mvpa <- read.csv(fileName, sep ='\t')
#numMVPA_cross-modalDecoding_SLspheres_s2_ratio100_202401111453
#numMVPA_cross-modalDecoding_IPS_s2_ratio200_202311151750
# numMVPA_crosstype_paeusorunDecoding_SLpTFCE_eyemove_s2_ratio150
##################
mvpa <- mvpa[-c(7:8)]
mvpa$subID <-as.factor(mvpa$subID)
head(mvpa)
#name change from mask to roi
mvpa$mask <-as.factor(mvpa$mask)
names(mvpa)[2] <- 'roi'
# let's make a expType to split the no_pitch exp from pitch exp
mvpa$subNb <- as.numeric(mvpa$subID)
mvpa$roi_order <- ifelse(mvpa$roi == 'LhIP2', 1,
ifelse(mvpa$roi == 'LhIP4',2,
ifelse(mvpa$roi == 'LhIP8', 3,
ifelse(mvpa$roi == 'Lprecentral', 4,
ifelse(mvpa$roi == 'Lpremotor', 5,
ifelse(mvpa$roi == 'LV1', 6,
ifelse(mvpa$roi == 'Rbroca', 7,
ifelse(mvpa$roi == 'RhIP3', 8,
ifelse(mvpa$roi == 'RhIP6', 9,
ifelse(mvpa$roi == 'RPFm', 10,
ifelse(mvpa$roi == 'Rprecentral', 11,
99)))))))))))
# make everything factor
str(mvpa)
mvpa$decodingCondition<-as.factor(mvpa$decodingCondition)
# subset the dataframe for plotting/analysis
img = 'beta' # or 't_maps'
mvpa = subset(mvpa, image == img )
# subset the dataframe for plotting/analysis
train1test2_mvpa = subset(mvpa, decodingCondition %in%
c('trainvseqT1_testaseqT2', 'trainaseqT1_testvseqT2'))
crosstype_mvpa_fig <-ggplot(train1test2_mvpa) +
geom_point(aes(x = roi, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
# subset the dataframe for plotting/analysis
train1test2_mvpa = subset(mvpa, decodingCondition %in%
c('trainvseqT2_testaseqT1', 'trainaseqT2_testvseqT1'))
crosstype_mvpa_fig <-ggplot(train1test2_mvpa) +
geom_point(aes(x = roi, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
rm(list=ls()) #clean console
pathResults <- '/Users/yiyang/DATA/numMVPA_fmriprep/outputs/derivatives/CoSMoMVPA/SLeyemove/S2'
fileName = paste(pathResults, 'numMVPA_crosstype_paeusorunDecoding_SLpTFCE_eyemove_s2_ratio150.csv', sep ='/')
mvpa <- read.csv(fileName, sep ='\t')
#numMVPA_cross-modalDecoding_SLspheres_s2_ratio100_202401111453
#numMVPA_cross-modalDecoding_IPS_s2_ratio200_202311151750
# numMVPA_crosstype_paeusorunDecoding_SLpTFCE_eyemove_s2_ratio150
##################
mvpa <- mvpa[-c(7:8)]
mvpa$subID <-as.factor(mvpa$subID)
head(mvpa)
#name change from mask to roi
mvpa$mask <-as.factor(mvpa$mask)
names(mvpa)[2] <- 'roi'
# let's make a expType to split the no_pitch exp from pitch exp
mvpa$subNb <- as.numeric(mvpa$subID)
mvpa$roi_order <- ifelse(mvpa$roi == 'LhIP2', 1,
ifelse(mvpa$roi == 'LhIP4',2,
ifelse(mvpa$roi == 'LhIP8', 3,
ifelse(mvpa$roi == 'Lprecentral', 4,
ifelse(mvpa$roi == 'Lpremotor', 5,
ifelse(mvpa$roi == 'LV1', 6,
ifelse(mvpa$roi == 'Rbroca', 7,
ifelse(mvpa$roi == 'RhIP3', 8,
ifelse(mvpa$roi == 'RhIP6', 9,
ifelse(mvpa$roi == 'RPFm', 10,
ifelse(mvpa$roi == 'Rprecentral', 11,
99)))))))))))
# make everything factor
str(mvpa)
mvpa$decodingCondition<-as.factor(mvpa$decodingCondition)
# subset the dataframe for plotting/analysis
img = 'beta' # or 't_maps'
mvpa = subset(mvpa, image == img )
# subset the dataframe for plotting/analysis
train1test2_mvpa = subset(mvpa, decodingCondition %in%
c('trainvseqT2_testaseqT1', 'trainaseqT2_testvseqT1'))
View(train1test2_mvpa)
View(train1test2_mvpa)
crosstype_mvpa_fig <-ggplot(train1test2_mvpa) +
geom_point(aes(x = roi, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
# subset the dataframe for plotting/analysis
train1test2_mvpa = subset(mvpa, decodingCondition %in%
c('trainvseqT1_testaseqT2', 'trainaseqT1_testvseqT2'))
crosstype_mvpa_fig <-ggplot(train1test2_mvpa) +
geom_point(aes(x = roi, y = accuracy, shape = as.factor(subID),
color = roi)) +#, shape = as.factor(subID)
stat_summary(aes(x = roi, y = accuracy, color = roi),
fun = mean,
geom = 'crossbar', width = 0.6, linewidth = .7) +
scale_shape_manual(values=1:nlevels(mvpa$subID)) +
geom_hline(yintercept=c(.25), linetype="dotted", colour="black", linewidth=.5) +
geom_vline(xintercept=c(6.5), linetype="dotted", colour="black", linewidth=.5) +
theme_classic() +
coord_cartesian(ylim = c(0.1,0.4), # This focuses the x-axis on the range of interest
clip = 'off') +
scale_y_continuous(expand = c(0, 0.01)) +
expand_limits(y = 0) +
ggtitle("visseq---->audseq") +
xlab('')
crosstype_mvpa_fig
